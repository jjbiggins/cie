/*------------------------------------------------------------------------------
 * Programmer: Your name
 * Date:
 * Description: .
 -------------------------------------------------------------------------------*/
#include "pid.h"
#include "trackSelect.h"
#include "robotHelperFunctions.h"




// Add definition of required functions
void set_PID_InputValues(pidController *PID) {
  // The "proportional" term should be 0 when we are on the line.
  // Compute the derivative (change) and integral (sum) of the

  // NEGATIVE PROPORTIONAL == RIGHT OF LINE
  // POSITIVE PROPORTIONAL == LEFT OF LINE
  int proportional = PID->getM_Proportional();
  int last_proportional = PID->getM_LastProportional();
  int derivative = proportional - last_proportional;
  PID->setM_Differential(derivative);

  int integral = PID->getM_Integral();
  integral += proportional;
  PID->setM_Integral(integral);

  // Remember the last position.
  PID->setM_LastProportional(proportional);

  // Compute the difference between the two motor power settings,
  // m1 - m2.  If this is a positive number the robot will turn
  // to the right.  If it is a negative number, the robot will
  // turn to the left, and the magnitude of the number determines
  // the sharpness of the turn.
  int power_difference = proportional / 20 + integral / 10000 + derivative * 3 / 2;
  PID->setM_powerDifference(power_difference);

  int base_speed = PID->getM_baseSpeed();

  if (power_difference > base_speed) {
    power_difference = base_speed;
  }
  if (power_difference < -base_speed) {
    power_difference = -base_speed;
  }

  if (power_difference < 0) {
    PID->setLeftMotorSpeed(base_speed + power_difference);
    PID->setRightMotorSpeed(base_speed);
    set_motors(base_speed + power_difference, base_speed);
  }
  else {
    PID->setLeftMotorSpeed(base_speed);
    PID->setRightMotorSpeed(base_speed - power_difference);
    set_motors(base_speed, base_speed - power_difference);
  }
}

void detect_RoadSigns(trackSelector *trackSelect){
  (play(">g32>>c32"));
  int num_of_black_stripes = trackSelect->getM_numBlackStripes();
  num_of_black_stripes += 1;
  print_long(num_of_black_stripes);
  trackSelect->setM_numBlackStripes(num_of_black_stripes);
  trackSelect->setM_TrackType(num_of_black_stripes);
  trackSelect->setM_WhiteCounter(0);

}
























